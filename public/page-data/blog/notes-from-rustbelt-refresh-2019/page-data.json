{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/notes-from-rustbelt-refresh-2019","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://codepen.io/rachelandrew/post/47a9337f00ec6d6481fae53970ef540f/rustbelt-refresh-css-layout-workshop\">Rustbelt Refresh CSS Layout Workshop by rachelandrew on CodePen</a></p>\n<p><em>display: flow-root;</em>\nUsed for making div display block and establishes a new formatting context for its contents.</p>\n<p><em>display: contents;</em>\nOnly displays content, removes all styling. Also removes all A11Y shit.</p>\n<h2>Columns</h2>\n<p><em>column-width: 400px;</em>\nMake two column layout. This shit is inherently responsive.</p>\n<p><em>column-count: 2;</em>\nSpecify column count.</p>\n<p><em>column-gap: 1em;</em>\nSets a gap between them cols.</p>\n<p><em>column-rule: 1px solid red;</em>\nAdd a rule to a column. This doesn't take up its own space.</p>\n<p><em>column-span: all;</em>\nMake that headline span across those columns.</p>\n<p><em>break-inside: avoid;</em>\nStop fragmentation from happening</p>\n<h2>Multi-column</h2>\n<blockquote>\n<p>Multi-col is good for checkboxes and lots of form fields because it breaks things into sections. You can do something like:</p>\n</blockquote>\n<pre><code class=\"language-css\">.fields {\n  max-width: 400px;\n  column-count: 4;\n}\n</code></pre>\n<h2>Alignment (For Grid)</h2>\n<p><em>Align-content</em>, along with other <em>align</em> prefixed attributes, deal with vertical alignment. <em>Justify-content</em> along with other <em>justify</em> prefixed attributes align on a horizontal level.</p>\n<blockquote>\n<p>Justify means inline model\nAlign means box model</p>\n</blockquote>\n<h2>Writing modes</h2>\n<pre><code class=\"language-css\">writing-mode: vertical-lr; //vertical writing mode\nwriting-mode: horizontal-tb; // horizontal writing mode\n</code></pre>\n<h3>Flexbox</h3>\n<blockquote>\n<p>Rachel thinks flex box makes for a terrible grid system. Flexbox is good at displaying a bunch of stuff in a sensible way. Big stuff gets more space, small stuff gets less space. Once you try to control Flexbox it starts misbehaving. </p>\n</blockquote>\n<h3>How are Flexbox and Grid different?</h3>\n<blockquote>\n<p>Flexbox is one dimensional. Youâ€™re either dealing with column or row. However you can wrap that to make it two dimensional. Two dimensional stuff is best left to Grid.</p>\n</blockquote>\n<h4>Spacing evenly</h4>\n<pre><code class=\"language-css\">.add-space {\n    justify-content: space-evenly; \n    // or //\n    justify-content: space-between;\n}\n</code></pre>\n<blockquote>\n<p><em>inline-size</em> and <em>block-size</em> might replace <em>width</em> and <em>height</em>.</p>\n</blockquote>","frontmatter":{"date":"March 08, 2019","path":"/blog/notes-from-rustbelt-refresh-2019","title":"Notes from Rustbelt Refresh 2019"}}},"pageContext":{}}}